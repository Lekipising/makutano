datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String     @id @default(cuid()) @map("_id")
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  hasBeenVerified Boolean?   @default(false)
  role            String?    @default("USER")
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  chapterIds      String[]
  chapters        Chapters[] @relation(fields: [chapterIds], references: [id])
  followers       String[]   @default([])
  following       String[]   @default([])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  likedPosts      String[]   @default([])
}

model VerificationToken {
  id         Int      @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  input     String
  photoUrl  String?
  authorId  String
  media     String[]  @default([])
  keywords  String[]  @default([])
  likes     String[]  @default([])
  comments  Comment[]
  chapterid String
  chapter   Chapters  @relation(fields: [chapterid], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
}

model Session {
  id      String   @id @default(cuid()) @map("_id")
  userId  String
  expires DateTime
  session String   @unique
  user    User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  input     String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Chapters {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String
  image       String
  createdBy   String
  postIds     String[]
  posts       Post[]
  userIds     String[]
  users       User[]   @relation(fields: [userIds], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
