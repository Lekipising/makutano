datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  likes         Likes[]
  comments      Comments[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  id         Int      @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String      @id @default(cuid()) @map("_id")
  input     String
  photoUrl  String?
  authorId  String
  media    String[]    @default([])
  keywords  String[]    @default([])
  likes     Likes[]
  comments  Comments[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Likes {
  id        String      @id @default(cuid()) @map("_id")
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comments {
  id        String      @id @default(cuid()) @map("_id")
  postId    String
  userId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String      @id @default(cuid()) @map("_id")
  userId    String
  expires   DateTime
  session   String      @unique
  user      User        @relation(fields: [userId], references: [id])
}